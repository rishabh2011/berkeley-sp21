// ============================================ BUCKET SPEED TEST ========================================= //
What would you like L to be?: 50

Enter # strings to insert into each map: 10000
class hashmap.MyHashMapALBuckets: 0.02 sec
class hashmap.MyHashMapLLBuckets: 0.02 sec
class hashmap.MyHashMapTSBuckets: 0.03 sec
class hashmap.MyHashMapHSBuckets: 0.02 sec
class hashmap.MyHashMapPQBuckets: 0.02 sec

Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into each map: 1000000
class hashmap.MyHashMapALBuckets: 0.93 sec
class hashmap.MyHashMapLLBuckets: 0.97 sec
class hashmap.MyHashMapTSBuckets: 1.14 sec
class hashmap.MyHashMapHSBuckets: 1.07 sec
class hashmap.MyHashMapPQBuckets: 1.20 sec

What would you like L to be?: 1000

Enter # strings to insert into each map: 1000000
class hashmap.MyHashMapALBuckets: 9.16 sec
class hashmap.MyHashMapLLBuckets: 8.84 sec
class hashmap.MyHashMapTSBuckets: 8.16 sec
class hashmap.MyHashMapHSBuckets: 8.43 sec
class hashmap.MyHashMapPQBuckets: 8.36 sec

// ============================================ INSERT IN ORDER SPEED ========================================= //

 This program inserts lexicographically increasing Stringsinto Maps as <String, Integer> pairs.

Enter # strings to insert into hashmap.ULLMap: 1000
class hashmap.ULLMap: 0.01 sec

Enter # strings to insert into hashmap.MyHashMap: 1000
class hashmap.MyHashMap: 0.00 sec

Enter # strings to insert into Java's HashMap: 1000
Java's Built-in HashMap: 0.00 sec

Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into hashmap.ULLMap: 1000000
--Stack Overflow -- couldn't add 1000000 strings.

Enter # strings to insert into hashmap.MyHashMap: 100000
class hashmap.MyHashMap: 0.10 sec

Enter # strings to insert into Java's HashMap: 100000
Java's Built-in HashMap: 0.03 sec

Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into hashmap.ULLMap: 100000
--Stack Overflow -- couldn't add 100000 strings.

Enter # strings to insert into hashmap.MyHashMap: 1000000
class hashmap.MyHashMap: 0.56 sec

Enter # strings to insert into Java's HashMap: 1000000
Java's Built-in HashMap: 0.38 sec

Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into hashmap.ULLMap: 10000
class hashmap.ULLMap: 0.25 sec

Enter # strings to insert into hashmap.MyHashMap: 10000000
class hashmap.MyHashMap: 4.80 sec

Enter # strings to insert into Java's HashMap: 10000000
Java's Built-in HashMap: 3.45 sec

// ============================================ INSERT RANDOM SPEED ========================================= //

 This program inserts random Strings of length L
 Into different types of maps as <String, Integer> pairs.

What would you like L to be?: 1000

Enter # strings to insert into hashmap.ULLMap: 10000
class hashmap.ULLMap: 0.53 sec

Enter # strings to insert into your hashmap.MyHashMap: 100000
class hashmap.MyHashMap: 0.98 sec

Enter # strings to insert into Java's HashMap: 100000
Java's Built-in HashMap: 0.81 sec

Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into hashmap.ULLMap: 10000
class hashmap.ULLMap: 0.41 sec

Enter # strings to insert into your hashmap.MyHashMap: 1000000
class hashmap.MyHashMap: 9.08 sec

Enter # strings to insert into Java's HashMap: 1000000
Java's Built-in HashMap: 8.68 sec